{"version":3,"sources":["webpack:///./js/dateMe.js","webpack:///./js/class.js","webpack:///./js/timer.js"],"names":["time","Date","Math","floor","specs","this","selector","targetDate","createTimer","Promise","resolve","reject","timerRef","document","querySelector","children","length","parseTimerHTML","innerHTML","fieldRef","querySelectorAll","valueRef","labelRef","startTimer","timerObj","setInterval","value","parse","now","textContent","startCountdown","then","bind","catch","err","console","warn","CountdownTimer"],"mappings":"uGAIA,IAAMA,EAAO,IAAIC,KACJC,KAAKC,MAAMH,EAAO,OAOjBE,KAAKC,MAAOH,EAAO,MAAR,MAMZE,KAAKC,MAAOH,EAAO,KAAR,KAMXE,KAAKC,MAAOH,EAAO,IAAe,M,wFCvB7C,WAAYI,GACVC,KAAKC,SAAWF,EAAME,SACtBD,KAAKE,WAAaH,EAAMG,W,2BAE1BC,YAAA,WAAc,WACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAWC,SAASC,cAAc,EAAKR,UAC7CM,GAAyC,IAA7BA,EAASG,SAASC,OAC1BN,EAAQE,GACRD,EAAO,uC,EAwBfM,eAAA,SAAeL,GASb,OARAA,EAASM,UACP,yaACe,CACfN,SAAUA,EACVO,SAAUN,SAASO,iBAAiB,UACpCC,SAAUR,SAASO,iBAAiB,UACpCE,SAAUT,SAASO,iBAAiB,Y,EAIxCG,WAAA,SAAWC,GAAU,WACSH,GAAuBG,EAA3CZ,SAA2CY,EAAjCL,SAAiCK,EAAvBH,UAAuBG,EAAbF,SACtCG,aAAY,SAAAC,GACV,IAAM1B,EAAOC,KAAK0B,MAAM,EAAKpB,YAAcN,KAAK2B,MAChDP,EAAS,GAAGQ,YAAc3B,KAAKC,MAAMH,EAAO,OAC5CqB,EAAS,GAAGQ,YAAc3B,KAAKC,MAC5BH,EAAO,MAAR,MAEFqB,EAAS,GAAGQ,YAAc3B,KAAKC,MAC5BH,EAAO,KAAR,KAEFqB,EAAS,GAAGQ,YAAc3B,KAAKC,MAAOH,EAAO,IAAe,OAC3D,M,EAEL8B,eAAA,WACE,OAAOzB,KAAKG,cACTuB,KAAK1B,KAAKY,gBACVc,KAAK1B,KAAKkB,WAAWS,KAAK3B,OAC1B4B,OAAM,SAAAC,GACLC,QAAQC,KAAKF,O,eC9DF,IAAIG,EAAe,CACpC/B,SAAU,WACVC,WAAY,IAAIN,KAAK,iBAGZ6B,mB","file":"main.2256f702064f51d4fa39.js","sourcesContent":["/*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\nconst time = new Date();\r\nconst days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\nconst hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\nconst mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\nconst secs = Math.floor((time % (1000 * 60)) / 1000);","export default class {\r\n  constructor(specs) {\r\n    this.selector = specs.selector;\r\n    this.targetDate = specs.targetDate;\r\n  }\r\n  createTimer() {\r\n    return new Promise((resolve, reject) => {\r\n      const timerRef = document.querySelector(this.selector);\r\n      timerRef && timerRef.children.length === 0\r\n        ? resolve(timerRef)\r\n        : reject('The timer cannot be found by ID');\r\n    });\r\n    const time = Date.parse(superTimer.targetDate) - Date.now();\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n    /*\r\n     * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n     * остатка % и делим его на количество миллисекунд в одном часе\r\n     * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n     */\r\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n    /*\r\n     * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n     * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n     */\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n    /*\r\n     * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n     * миллисекунд в одной секунде (1000)\r\n     */\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n  }\r\n  parseTimerHTML(timerRef) {\r\n    timerRef.innerHTML =\r\n      '<div class=\"field\"><span class=\"value\" data - value=\"days\">11</span><span class=\"label\">Days</span></div><div class=\"field\"><span class=\"value\" data-value=\"hours\">11</span><span class=\"label\">Hours</span></div><div class=\"field\"><span class=\"value\" data-value=\"mins\">11</span><span class=\"label\">Minutes</span></div><div class=\"field\"><span class=\"value\" data-value=\"secs\">11</span><span class=\"label\">Seconds</span></div>';\r\n    const timerObj = {\r\n      timerRef: timerRef,\r\n      fieldRef: document.querySelectorAll('.field'),\r\n      valueRef: document.querySelectorAll('.value'),\r\n      labelRef: document.querySelectorAll('.label'),\r\n    };\r\n    return timerObj;\r\n  }\r\n  startTimer(timerObj) {\r\n    const { timerRef, fieldRef, valueRef, labelRef } = timerObj;\r\n    setInterval(value => {\r\n      const time = Date.parse(this.targetDate) - Date.now();\r\n      valueRef[0].textContent = Math.floor(time / (1000 * 60 * 60 * 24));\r\n      valueRef[1].textContent = Math.floor(\r\n        (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\r\n      );\r\n      valueRef[2].textContent = Math.floor(\r\n        (time % (1000 * 60 * 60)) / (1000 * 60),\r\n      );\r\n      valueRef[3].textContent = Math.floor((time % (1000 * 60)) / 1000);\r\n    }, 1000);\r\n  }\r\n  startCountdown() {\r\n    return this.createTimer()\r\n      .then(this.parseTimerHTML)\r\n      .then(this.startTimer.bind(this))\r\n      .catch(err => {\r\n        console.warn(err);\r\n      });\r\n  }\r\n}\r\n","import CountdownTimer from './class';\r\nimport './dateMe';\r\nconst superTimer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jan 1, 2021'),\r\n});\r\n\r\nsuperTimer.startCountdown();\r\n"],"sourceRoot":""}