{"version":3,"sources":["webpack:///./js/dateMe.js","webpack:///./js/class.js","webpack:///./js/timer.js"],"names":["time","Date","Math","floor","specs","this","selector","targetDate","createTimer","Promise","resolve","reject","timerRef","document","querySelector","children","length","parseTimerHTML","innerHTML","titleRef","valueRef","querySelectorAll","labelRef","startTimer","timerObj","intervalSet","setInterval","parse","now","textContent","clearInterval","style","fontSize","addEventListener","animateTimer","bind","target","classList","contains","insertAdjacentHTML","setTimeout","nextSibling","add","remove","startCountdown","then","catch","err","console","warn","CountdownTimer"],"mappings":"uGAIA,IAAMA,EAAO,IAAIC,KACJC,KAAKC,MAAMH,EAAO,OAOjBE,KAAKC,MAAOH,EAAO,MAAR,MAMZE,KAAKC,MAAOH,EAAO,KAAR,KAMXE,KAAKC,MAAOH,EAAO,IAAe,M,wFCvB7C,WAAYI,GACVC,KAAKC,SAAWF,EAAME,SACtBD,KAAKE,WAAaH,EAAMG,W,2BAE1BC,YAAA,WAAc,WACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAWC,SAASC,cAAc,EAAKR,UAC7CM,GAAyC,IAA7BA,EAASG,SAASC,OAC1BN,EAAQE,GACRD,EAAO,uC,EAGfM,eAAA,SAAeL,GASb,OARAA,EAASM,UACP,uaACe,CACfN,SAAUA,EACVO,SAAUN,SAASC,cAAc,mBACjCM,SAAUP,SAASQ,iBAAiB,UACpCC,SAAUT,SAASQ,iBAAiB,Y,EAIxCE,WAAA,SAAWC,GAAU,WACXZ,EAA2CY,EAA3CZ,SAAUO,EAAiCK,EAAjCL,SAAUC,EAAuBI,EAAvBJ,SAAUE,EAAaE,EAAbF,SAEhCG,EAAcC,aAAY,WAC9B,IAAM1B,EAAOC,KAAK0B,MAAM,EAAKpB,YAAcN,KAAK2B,MAEhDR,EAAS,GAAGS,YAAc3B,KAAKC,MAAMH,EAAO,OAC5CoB,EAAS,GAAGS,YAAc3B,KAAKC,MAC5BH,EAAO,MAAR,MAEFoB,EAAS,GAAGS,YAAc3B,KAAKC,MAC5BH,EAAO,KAAR,KAEFoB,EAAS,GAAGS,YAAc3B,KAAKC,MAAOH,EAAO,IAAe,KAE5DsB,EAAS,GAAGO,YAAyC,GAA3BT,EAAS,GAAGS,YAAmB,MAAQ,OACjEP,EAAS,GAAGO,YAAyC,GAA3BT,EAAS,GAAGS,YAAmB,OAAS,QAClEP,EAAS,GAAGO,YACiB,GAA3BT,EAAS,GAAGS,YAAmB,SAAW,UAC5CP,EAAS,GAAGO,YACiB,GAA3BT,EAAS,GAAGS,YAAmB,SAAW,UAEhC,GAAR7B,IACF8B,cAAcL,GACdN,EAASU,YAAc,oBACvBV,EAASY,MAAMC,SAAW,UAE3B,KAEHpB,EAASqB,iBACP,qBACA5B,KAAK6B,aAAaC,KAAK9B,Q,EAG3B6B,aAAA,YAAyB,IAAVE,EAAU,EAAVA,OACTA,EAAOC,UAAUC,SAAS,WAC5BF,EAAOG,mBACL,WADF,6BAE+BH,EAAOP,YAFtC,WAIAW,YAAW,WACTJ,EAAOK,YAAYJ,UAAUK,IAAI,WAChC,KACHF,YAAW,WACTJ,EAAOK,YAAYE,WAClB,O,EAGPC,eAAA,WACE,OAAOvC,KAAKG,cACTqC,KAAKxC,KAAKY,gBACV4B,KAAKxC,KAAKkB,WAAWY,KAAK9B,OAC1ByC,OAAM,SAAAC,GACLC,QAAQC,KAAKF,O,eC3EF,IAAIG,EAAe,CACpC5C,SAAU,WACVC,WAAY,IAAIN,KAAK,iBAGZ2C,mB","file":"main.531775ffc8cd4ec2f452.js","sourcesContent":["/*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\nconst time = new Date();\r\nconst days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\nconst hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\nconst mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */\r\nconst secs = Math.floor((time % (1000 * 60)) / 1000);","export default class {\r\n  constructor(specs) {\r\n    this.selector = specs.selector;\r\n    this.targetDate = specs.targetDate;\r\n  }\r\n  createTimer() {\r\n    return new Promise((resolve, reject) => {\r\n      const timerRef = document.querySelector(this.selector);\r\n      timerRef && timerRef.children.length === 0\r\n        ? resolve(timerRef)\r\n        : reject('The timer cannot be found by ID');\r\n    });\r\n  }\r\n  parseTimerHTML(timerRef) {\r\n    timerRef.innerHTML =\r\n      '<div class=\"field\"><span class=\"value\" data-value=\"days\">11</span><span class=\"label\">Days</span></div><div class=\"field\"><span class=\"value\" data-value=\"hours\">11</span><span class=\"label\">Hours</span></div><div class=\"field\"><span class=\"value\" data-value=\"mins\">11</span><span class=\"label\">Minutes</span></div><div class=\"field\"><span class=\"value\" data-value=\"secs\">11</span><span class=\"label\">Seconds</span></div>';\r\n    const timerObj = {\r\n      timerRef: timerRef,\r\n      titleRef: document.querySelector('.new-year-timer'),\r\n      valueRef: document.querySelectorAll('.value'),\r\n      labelRef: document.querySelectorAll('.label'),\r\n    };\r\n    return timerObj;\r\n  }\r\n  startTimer(timerObj) {\r\n    const { timerRef, titleRef, valueRef, labelRef } = timerObj;\r\n\r\n    const intervalSet = setInterval(() => {\r\n      const time = Date.parse(this.targetDate) - Date.now();\r\n\r\n      valueRef[0].textContent = Math.floor(time / (1000 * 60 * 60 * 24));\r\n      valueRef[1].textContent = Math.floor(\r\n        (time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\r\n      );\r\n      valueRef[2].textContent = Math.floor(\r\n        (time % (1000 * 60 * 60)) / (1000 * 60),\r\n      );\r\n      valueRef[3].textContent = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n      labelRef[0].textContent = valueRef[0].textContent == 1 ? 'Day' : 'Days';\r\n      labelRef[1].textContent = valueRef[1].textContent == 1 ? 'Hour' : 'Hours';\r\n      labelRef[2].textContent =\r\n        valueRef[2].textContent == 1 ? 'Minute' : 'Minutes';\r\n      labelRef[3].textContent =\r\n        valueRef[3].textContent == 1 ? 'Second' : 'Seconds';\r\n\r\n      if (time == 0) {\r\n        clearInterval(intervalSet);\r\n        titleRef.textContent = 'HAPPY NEW YEAR!!!';\r\n        titleRef.style.fontSize = '50px';\r\n      }\r\n    }, 1000);\r\n\r\n    timerRef.addEventListener(\r\n      'DOMSubtreeModified',\r\n      this.animateTimer.bind(this),\r\n    );\r\n  }\r\n  animateTimer({ target }) {\r\n    if (target.classList.contains('value')) {\r\n      target.insertAdjacentHTML(\r\n        'afterEnd',\r\n        `<span class=\"value after\">${target.textContent}</span>`,\r\n      );\r\n      setTimeout(() => {\r\n        target.nextSibling.classList.add('trans');\r\n      }, 200);\r\n      setTimeout(() => {\r\n        target.nextSibling.remove();\r\n      }, 900);\r\n    }\r\n  }\r\n  startCountdown() {\r\n    return this.createTimer()\r\n      .then(this.parseTimerHTML)\r\n      .then(this.startTimer.bind(this))\r\n      .catch(err => {\r\n        console.warn(err);\r\n      });\r\n  }\r\n}\r\n","import CountdownTimer from './class';\r\nimport './dateMe';\r\nconst superTimer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jan 1, 2021'),\r\n});\r\n\r\nsuperTimer.startCountdown();\r\n"],"sourceRoot":""}